{"version":3,"sources":["../../node_modules/ethereumjs-vm/dist sync","contracts/index.js","package/multiParamManager.js","package/arcadecontractloader.js","package/index.js","Demo.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","__webpack_require__","r","__webpack_exports__","_Address_json__WEBPACK_IMPORTED_MODULE_0__","d","_AllowanceWrapper_json__WEBPACK_IMPORTED_MODULE_1__","_Broadcaster_json__WEBPACK_IMPORTED_MODULE_2__","_CommonConstants_json__WEBPACK_IMPORTED_MODULE_3__","_ERC1155_json__WEBPACK_IMPORTED_MODULE_4__","_ERC1155Metadata_URI_json__WEBPACK_IMPORTED_MODULE_5__","_ERC1155Mintable_json__WEBPACK_IMPORTED_MODULE_6__","_ERC1155MixedFungible_json__WEBPACK_IMPORTED_MODULE_7__","_ERC1155MixedFungibleMintable_json__WEBPACK_IMPORTED_MODULE_8__","_ERC1155MockReceiver_json__WEBPACK_IMPORTED_MODULE_9__","_ERC1155ReceiverDelegate_json__WEBPACK_IMPORTED_MODULE_10__","_ERC1155TokenReceiver_json__WEBPACK_IMPORTED_MODULE_11__","_ERC165_json__WEBPACK_IMPORTED_MODULE_12__","_ERCXXXXReceiverDelegate_json__WEBPACK_IMPORTED_MODULE_13__","_IERC1155_json__WEBPACK_IMPORTED_MODULE_14__","_IERC1538_json__WEBPACK_IMPORTED_MODULE_15__","_Migrations_json__WEBPACK_IMPORTED_MODULE_16__","_ProxyBaseStorage_json__WEBPACK_IMPORTED_MODULE_17__","_ProxyReceiver_json__WEBPACK_IMPORTED_MODULE_18__","_ProxyReceiverStorage_001_ERC1155MockReceiver_json__WEBPACK_IMPORTED_MODULE_19__","_ProxyReceiverStorage_002_ERCXXXXFuture_json__WEBPACK_IMPORTED_MODULE_20__","_SafeMath_json__WEBPACK_IMPORTED_MODULE_21__","MultiParamManager","lookupOnly","funABI","clickCallBack","inputs","title","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeInput","inputValue","target","value","onSubmit","preventDefault","react_default","a","createElement","key","name","style","margin","padding","type","placeholder","onChange","Component","defaultConfig","DEBUG","hide","txHelper","remixLib","execution","ArcadeContractLoader","executionContext","_React$Component","props","config","deepmerge","state","contracts","inherits","createClass","contractJson","networkId","contractNetworks","networks","undefined","address","_loadContract","asyncToGenerator","regenerator_default","mark","_callee","contractObject","resultingContract","contract","wrap","_context","prev","next","t0","t1","web3","eth","net","getId","t2","sent","getAddressFromJson","Contract","abi","methods","_address","_abi","t3","console","log","abrupt","stop","_x","apply","arguments","_componentDidMount","_callee2","contractList","loadedContracts","i","_context2","getOwnPropertyNames","length","loadContract","setState","contractABI","contractName","_this2","ret","$","push","getCallButton","contractAbi","args","constant","valArray","inputsValues","domEl","valArr","clickButton","inputParametersDeclarationToString","render","contractDisplay","c","react","renderInstanceFromABI","React","Arcade","constructor","Demo","account","gwei","doingTransaction","msg","getServerMessage","axios","get","resp","data","_this$state","connectedDisplay","tx","block","avgBlockTime","etherscan","build","onUpdate","arcadecontractloader_ArcadeContractLoader","require","className","requiredNetwork","web3Provider","Web3","ReactDOM","src_Demo","document","getElementById"],"mappings":"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","file":"static/js/main.f3f31d93.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 722;","// @create-index\n\nexport { default as Address } from './Address.json';\nexport { default as AllowanceWrapper } from './AllowanceWrapper.json';\nexport { default as Broadcaster } from './Broadcaster.json';\nexport { default as CommonConstants } from './CommonConstants.json';\nexport { default as ERC1155 } from './ERC1155.json';\nexport { default as ERC1155Metadata_URI } from './ERC1155Metadata_URI.json';\nexport { default as ERC1155Mintable } from './ERC1155Mintable.json';\nexport { default as ERC1155MixedFungible } from './ERC1155MixedFungible.json';\nexport { default as ERC1155MixedFungibleMintable } from './ERC1155MixedFungibleMintable.json';\nexport { default as ERC1155MockReceiver } from './ERC1155MockReceiver.json';\nexport { default as ERC1155ReceiverDelegate } from './ERC1155ReceiverDelegate.json';\nexport { default as ERC1155TokenReceiver } from './ERC1155TokenReceiver.json';\nexport { default as ERC165 } from './ERC165.json';\nexport { default as ERCXXXXReceiverDelegate } from './ERCXXXXReceiverDelegate.json';\nexport { default as IERC1155 } from './IERC1155.json';\nexport { default as IERC1538 } from './IERC1538.json';\nexport { default as Migrations } from './Migrations.json';\nexport { default as ProxyBaseStorage } from './ProxyBaseStorage.json';\nexport { default as ProxyReceiver } from './ProxyReceiver.json';\nexport { default as ProxyReceiverStorage_001_ERC1155MockReceiver } from './ProxyReceiverStorage_001_ERC1155MockReceiver.json';\nexport { default as ProxyReceiverStorage_002_ERCXXXXFuture } from './ProxyReceiverStorage_002_ERCXXXXFuture.json';\nexport { default as SafeMath } from './SafeMath.json';\n\n","import React,{ Component } from 'react';\r\n\r\nexport default class MultiParamManager extends Component {\r\n\r\n  constructor (lookupOnly, funABI, clickCallBack, inputs, title) {\r\n    super();\r\n\r\n    this.lookupOnly = lookupOnly\r\n    this.funABI = funABI\r\n    this.clickCallBack = clickCallBack\r\n    this.inputs = inputs\r\n    this.title = title\r\n\r\n    this.inputValue = \"\"\r\n  }\r\n\r\n  changeInput = (e) => {\r\n    this.inputValue = e.target.value\r\n  }\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    this.clickCallBack(this.funABI.inputs, this.inputValue)\r\n  }\r\n\r\n  render() {\r\n    return <div key={\"abi\"+this.funABI.name} style={{margin:5,padding:5}}>\r\n              <form onSubmit={this.onSubmit}>\r\n                <button type=\"submit\">{this.funABI.name}</button>\r\n                <input title={this.inputs} placeholder={this.inputs} onChange={this.changeInput}>\r\n                </input>\r\n              </form>\r\n            </div>\r\n  }\r\n}\r\n\r\n// 'use strict'\r\n//\r\n// var yo = require('yo-yo')\r\n// var css = require('./universal-dapp-styles')\r\n// var copyToClipboard = require('./app/ui/copy-to-clipboard')\r\n// var remixLib = require('remix-lib')\r\n// var txFormat = remixLib.execution.txFormat\r\n//\r\n// class MultiParamManager {\r\n//\r\n//   /**\r\n//     *\r\n//     * @param {bool} lookupOnly\r\n//     * @param {Object} funABI\r\n//     * @param {Function} clickMultiCallBack\r\n//     * @param {string} inputs\r\n//     * @param {string} title\r\n//     * @param {string} evmBC\r\n//     *\r\n//     */\r\n//   constructor (lookupOnly, funABI, clickCallBack, inputs, title, evmBC) {\r\n//     this.lookupOnly = lookupOnly\r\n//     this.funABI = funABI\r\n//     this.clickCallBack = clickCallBack\r\n//     this.inputs = inputs\r\n//     this.title = title\r\n//     this.evmBC = evmBC\r\n//     this.basicInputField\r\n//     this.multiFields\r\n//   }\r\n//\r\n//   switchMethodViewOn () {\r\n//     this.contractActionsContainerSingle.style.display = 'none'\r\n//     this.contractActionsContainerMulti.style.display = 'flex'\r\n//     this.makeMultiVal()\r\n//   }\r\n//\r\n//   switchMethodViewOff () {\r\n//     this.contractActionsContainerSingle.style.display = 'flex'\r\n//     this.contractActionsContainerMulti.style.display = 'none'\r\n//     var multiValString = this.getMultiValsString()\r\n//     if (multiValString) this.basicInputField.value = multiValString\r\n//   }\r\n//\r\n//   getValue (item, index) {\r\n//     var valStr = item.value.join('')\r\n//     return valStr\r\n//   }\r\n//\r\n//   getMultiValsString () {\r\n//     var valArray = this.multiFields.querySelectorAll('input')\r\n//     var ret = ''\r\n//     var valArrayTest = []\r\n//\r\n//     for (var j = 0; j < valArray.length; j++) {\r\n//       if (ret !== '') ret += ','\r\n//       var elVal = valArray[j].value\r\n//       valArrayTest.push(elVal)\r\n//       elVal = elVal.replace(/(^|,\\s+|,)(\\d+)(\\s+,|,|$)/g, '$1\"$2\"$3') // replace non quoted number by quoted number\r\n//       elVal = elVal.replace(/(^|,\\s+|,)(0[xX][0-9a-fA-F]+)(\\s+,|,|$)/g, '$1\"$2\"$3') // replace non quoted hex string by quoted hex string\r\n//       try {\r\n//         JSON.parse(elVal)\r\n//       } catch (e) {\r\n//         elVal = '\"' + elVal + '\"'\r\n//       }\r\n//       ret += elVal\r\n//     }\r\n//     var valStringTest = valArrayTest.join('')\r\n//     if (valStringTest) {\r\n//       return ret\r\n//     } else {\r\n//       return ''\r\n//     }\r\n//   }\r\n//\r\n//   emptyInputs () {\r\n//     var valArray = this.multiFields.querySelectorAll('input')\r\n//     for (var k = 0; k < valArray.length; k++) {\r\n//       valArray[k].value = ''\r\n//     }\r\n//     this.basicInputField.value = ''\r\n//   }\r\n//\r\n//   makeMultiVal () {\r\n//     var inputString = this.basicInputField.value\r\n//     if (inputString) {\r\n//       inputString = inputString.replace(/(^|,\\s+|,)(\\d+)(\\s+,|,|$)/g, '$1\"$2\"$3') // replace non quoted number by quoted number\r\n//       inputString = inputString.replace(/(^|,\\s+|,)(0[xX][0-9a-fA-F]+)(\\s+,|,|$)/g, '$1\"$2\"$3') // replace non quoted hex string by quoted hex string\r\n//       var inputJSON = JSON.parse('[' + inputString + ']')\r\n//       var multiInputs = this.multiFields.querySelectorAll('input')\r\n//       for (var k = 0; k < multiInputs.length; k++) {\r\n//         if (inputJSON[k]) {\r\n//           multiInputs[k].value = JSON.stringify(inputJSON[k])\r\n//         }\r\n//       }\r\n//     }\r\n//   }\r\n//\r\n//   createMultiFields () {\r\n//     if (this.funABI.inputs) {\r\n//       return yo`<div>\r\n//         ${this.funABI.inputs.map(function (inp) {\r\n//           return yo`<div class=\"${css.multiArg}\"><label for=\"${inp.name}\"> ${inp.name}: </label><input placeholder=\"${inp.type}\" title=\"${inp.name}\"></div>`\r\n//         })}\r\n//       </div>`\r\n//     }\r\n//   }\r\n//\r\n//   render () {\r\n//     var title\r\n//     if (this.title) {\r\n//       title = this.title\r\n//     } else if (this.funABI.name) {\r\n//       title = this.funABI.name\r\n//     } else {\r\n//       title = '(fallback)'\r\n//     }\r\n//\r\n//     this.basicInputField = yo`<input></input>`\r\n//     this.basicInputField.setAttribute('placeholder', this.inputs)\r\n//     this.basicInputField.setAttribute('title', this.inputs)\r\n//\r\n//     var onClick = (domEl) => {\r\n//       this.clickCallBack(this.funABI.inputs, this.basicInputField.value)\r\n//     }\r\n// // TODO: if this is a lookup only make this button btn-info\r\n// // otherwise it needs to have btn-warning injected\r\n// // or do we need to only do this in 1 place - I have a feeling that this will happen in multiple places\r\n//\r\n//     this.contractActionsContainerSingle = yo`<div class=\"${css.contractActionsContainerSingle}\" >\r\n//       <button onclick=${() => { onClick() }} class=\"${css.instanceButton} btn btn-sm\">${title}</button>${this.basicInputField}<i class=\"fas fa-angle-down ${css.methCaret}\" onclick=${() => { this.switchMethodViewOn() }} title=${title} ></i>\r\n//       </div>`\r\n//\r\n//     this.multiFields = this.createMultiFields()\r\n//\r\n//     var multiOnClick = () => {\r\n//       var valsString = this.getMultiValsString()\r\n//       if (valsString) {\r\n//         this.clickCallBack(this.funABI.inputs, valsString)\r\n//       } else {\r\n//         this.clickCallBack(this.funABI.inputs, '')\r\n//       }\r\n//     }\r\n//\r\n//     var button = yo`<button onclick=${() => { multiOnClick() }} class=\"${css.instanceButton}\"></button>`\r\n//\r\n//     this.contractActionsContainerMulti = yo`<div class=\"${css.contractActionsContainerMulti}\" >\r\n//       <div class=\"${css.contractActionsContainerMultiInner} text-dark\" >\r\n//         <div onclick=${() => { this.switchMethodViewOff() }} class=\"${css.multiHeader}\">\r\n//           <div class=\"${css.multiTitle}\">${title}</div>\r\n//           <i class='fas fa-angle-up ${css.methCaret}'></i>\r\n//         </div>\r\n//         ${this.multiFields}\r\n//         <div class=\"${css.group} ${css.multiArg}\" >\r\n//           ${button}\r\n//           ${copyToClipboard(\r\n//             () => {\r\n//               var multiString = this.getMultiValsString()\r\n//               var multiJSON = JSON.parse('[' + multiString + ']')\r\n//               var encodeObj\r\n//               if (this.evmBC) {\r\n//                 encodeObj = txFormat.encodeData(this.funABI, multiJSON, this.evmBC)\r\n//               } else {\r\n//                 encodeObj = txFormat.encodeData(this.funABI, multiJSON)\r\n//               }\r\n//               if (encodeObj.error) {\r\n//                 throw new Error(encodeObj.error)\r\n//               } else {\r\n//                 return encodeObj.data\r\n//               }\r\n//             }, 'Encode values of input fields & copy to clipboard', 'fa-clipboard')}\r\n//         </div>\r\n//       </div>\r\n//     </div>`\r\n//\r\n//     var contractProperty = yo`<div class=\"${css.contractProperty}\">${this.contractActionsContainerSingle} ${this.contractActionsContainerMulti}</div>`\r\n// // TODO: add class for btn-info to the button and remove stuff from the class\r\n//     if (this.lookupOnly) {\r\n//       contractProperty.classList.add(css.constant)\r\n//       button.setAttribute('title', (title + ' - call'))\r\n//       button.innerHTML = 'call'\r\n//       this.contractActionsContainerSingle.querySelector(`.${css.instanceButton}`).setAttribute('title', (title + ' - call'))\r\n//       this.contractActionsContainerSingle.querySelector(`.${css.instanceButton}`).classList.add('btn-info')\r\n//       button.classList.add('btn-info')\r\n//     } else {\r\n//       this.contractActionsContainerSingle.querySelector(`.${css.instanceButton}`).classList.add('btn-warning')\r\n//       button.innerHTML = 'transact'\r\n//       button.classList.add('btn-warning')\r\n//     }\r\n//\r\n//     if (this.funABI.inputs && this.funABI.inputs.length > 0) {\r\n//       contractProperty.classList.add(css.hasArgs)\r\n//     } else if (this.funABI.type === 'fallback') {\r\n//       contractProperty.classList.add(css.hasArgs)\r\n//       this.contractActionsContainerSingle.querySelector('i').style.visibility = 'hidden'\r\n//     } else {\r\n//       this.contractActionsContainerSingle.querySelector('i').style.visibility = 'hidden'\r\n//       this.basicInputField.style.display = 'none'\r\n//     }\r\n//\r\n//     if (this.funABI.payable === true) {\r\n//       contractProperty.classList.add(css.payable)\r\n//       button.setAttribute('title', (title + ' - transact (payable)'))\r\n//       this.contractActionsContainerSingle.querySelector('button').setAttribute('title', (title + ' - transact (payable)'))\r\n//     }\r\n//\r\n//     if (!this.lookupOnly && this.funABI.payable === false) {\r\n//       button.setAttribute('title', (title + ' - transact (not payable)'))\r\n//       this.contractActionsContainerSingle.querySelector('button').setAttribute('title', (title + ' - transact (not payable)'))\r\n//     }\r\n//\r\n//     return contractProperty\r\n//   }\r\n// }\r\n//\r\n// module.exports = MultiParamManager\r\n","import * as React from 'react';\nimport deepmerge from 'deepmerge';\nimport remixLib from 'remix-lib';\nimport * as $ from 'jquery';\nimport MultiParamManager from './multiParamManager';\n\nlet defaultConfig = {\n  DEBUG: true,\n  hide: true\n}\n\nvar txHelper = remixLib.execution.txHelper\nvar executionContext = remixLib.execution.executionContext\n\nexport class ArcadeContractLoader extends React.Component {\n\n    constructor(props) {\n      super(props);\n\n      let config = defaultConfig\n      if(props.config) {\n        config = deepmerge(config, props.config)\n      }\n      this.state = {\n        config: config,\n        contracts: {}\n      }\n    }\n\n    getAddressFromJson(contractJson, networkId)\n    {\n      var contractNetworks = contractJson.networks;\n\n      if (contractNetworks[networkId] !== undefined)\n        return (contractNetworks[networkId].address)\n    }\n\n    async loadContract(contractObject) {\n      var resultingContract = contractObject\n\n      try {\n\n        let address = this.getAddressFromJson(contractObject, await this.props.web3.eth.net.getId())\n        let contract = new this.props.web3.eth.Contract(contractObject.abi, address)\n\n        resultingContract = contract.methods\n        resultingContract._address = address\n        resultingContract._abi = contractObject.abi\n\n      }\n      catch(e) {\n        console.log(\"ERROR LOADING CONTRACT \"+contractObject,e)\n      }\n\n      return resultingContract\n    }\n\n    async componentDidMount() {\n      let {contracts} = this.props\n      let contractList = Object.getOwnPropertyNames(contracts)\n      let loadedContracts = {}\n\n      for(var i = 0; i < contractList.length; i++){\n\n        var name = contractList[i];\n\n        // ignore __esModule and Migrations\n        if (name === '__esModule' || name === 'Migrations')\n          continue;\n\n          // load contracts via web3\n        loadedContracts[name] = await this.loadContract(contracts[name]);\n      }\n\n\n      this.setState({\n        contracts: loadedContracts\n      })\n\n    }\n\n    renderInstanceFromABI(contractABI, address, contractName) {\n      let ret = []\n\n      console.log(contractABI);\n\n      $.each(contractABI, (i, funABI) => {\n        if (funABI.type !== 'function') {\n          return\n        }\n\n        ret.push(this.getCallButton(\n          {\n            funABI: funABI,\n            address: address,\n            contractAbi: contractABI,\n            contractName: contractName\n          }\n          ));\n      })\n\n      return ret\n    }\n\n    getCallButton(args) {\n      var lookupOnly = args.funABI.constant\n\n      function getInputs (funABI) {\n        if (!funABI.inputs) {\n          return ''\n        }\n        return txHelper.inputParametersDeclarationToString(funABI.inputs)\n      }\n\n      function clickButton (valArr, inputsValues) {\n        console.log(valArr, inputsValues);\n        // var logMsg\n        // if (!args.funABI.constant) {\n        //   logMsg = `transact to ${args.contractName}.${(args.funABI.name) ? args.funABI.name : '(fallback)'}`\n        // } else {\n        //   logMsg = `call to ${args.contractName}.${(args.funABI.name) ? args.funABI.name : '(fallback)'}`\n        // }\n        //\n        // var value = inputsValues\n        //\n        // var confirmationCb = (network, tx, gasEstimation, continueTxExecution, cancelCb) => {\n        //   if (network.name !== 'Main') {\n        //     return continueTxExecution(null)\n        //   }\n        //   var amount = executionContext.web3().fromWei(typeConversion.toInt(tx.value), 'ether')\n        //   var content = confirmDialog(tx, amount, gasEstimation, self.udapp,\n        //     (gasPrice, cb) => {\n        //       let txFeeText, priceStatus\n        //       // TODO: this try catch feels like an anti pattern, can/should be\n        //       // removed, but for now keeping the original logic\n        //       try {\n        //         var fee = executionContext.web3().toBigNumber(tx.gas).mul(executionContext.web3().toBigNumber(executionContext.web3().toWei(gasPrice.toString(10), 'gwei')))\n        //         txFeeText = ' ' + executionContext.web3().fromWei(fee.toString(10), 'ether') + ' Ether'\n        //         priceStatus = true\n        //       } catch (e) {\n        //         txFeeText = ' Please fix this issue before sending any transaction. ' + e.message\n        //         priceStatus = false\n        //       }\n        //       cb(txFeeText, priceStatus)\n        //     },\n        //     (cb) => {\n        //       executionContext.web3().eth.getGasPrice((error, gasPrice) => {\n        //         var warnMessage = ' Please fix this issue before sending any transaction. '\n        //         if (error) {\n        //           return cb('Unable to retrieve the current network gas price.' + warnMessage + error)\n        //         }\n        //         try {\n        //           var gasPriceValue = executionContext.web3().fromWei(gasPrice.toString(10), 'gwei')\n        //           cb(null, gasPriceValue)\n        //         } catch (e) {\n        //           cb(warnMessage + e.message, null, false)\n        //         }\n        //       })\n        //     }\n        //   )\n        //   modalDialog('Confirm transaction', content,\n        //     { label: 'Confirm',\n        //       fn: () => {\n        //         self.udapp._deps.config.setUnpersistedProperty('doNotShowTransactionConfirmationAgain', content.querySelector('input#confirmsetting').checked)\n        //         // TODO: check if this is check is still valid given the refactor\n        //         if (!content.gasPriceStatus) {\n        //           cancelCb('Given gas price is not correct')\n        //         } else {\n        //           var gasPrice = executionContext.web3().toWei(content.querySelector('#gasprice').value, 'gwei')\n        //           continueTxExecution(gasPrice)\n        //         }\n        //       }}, {\n        //         label: 'Cancel',\n        //         fn: () => {\n        //           return cancelCb('Transaction canceled by user.')\n        //         }\n        //       })\n        // }\n        //\n        // var continueCb = (error, continueTxExecution, cancelCb) => {\n        //   if (error) {\n        //     var msg = typeof error !== 'string' ? error.message : error\n        //     modalDialog('Gas estimation failed', yo`<div>Gas estimation errored with the following message (see below).\n        //     The transaction execution will likely fail. Do you want to force sending? <br>\n        //     ${msg}\n        //     </div>`,\n        //       {\n        //         label: 'Send Transaction',\n        //         fn: () => {\n        //           continueTxExecution()\n        //         }}, {\n        //           label: 'Cancel Transaction',\n        //           fn: () => {\n        //             cancelCb()\n        //           }\n        //         })\n        //   } else {\n        //     continueTxExecution()\n        //   }\n        // }\n        //\n        // var outputCb = (decoded) => {\n        //   outputOverride.innerHTML = ''\n        //   outputOverride.appendChild(decoded)\n        // }\n        //\n        // var promptCb = (okCb, cancelCb) => {\n        //   modalCustom.promptPassphrase('Passphrase requested', 'Personal mode is enabled. Please provide passphrase of account', '', okCb, cancelCb)\n        // }\n        //\n        // // contractsDetails is used to resolve libraries\n        // txFormat.buildData(args.contractName, args.contractAbi, {}, false, args.funABI, args.funABI.type !== 'fallback' ? value : '', (error, data) => {\n        //   if (!error) {\n        //     if (!args.funABI.constant) {\n        //       self.registry.get('logCallback').api(`${logMsg} pending ... `)\n        //     } else {\n        //       self.registry.get('logCallback').api(`${logMsg}`)\n        //     }\n        //     if (args.funABI.type === 'fallback') data.dataHex = value\n        //     self.udapp.callFunction(args.address, data, args.funABI, confirmationCb, continueCb, promptCb, (error, txResult) => {\n        //       if (!error) {\n        //         var isVM = executionContext.isVM()\n        //         if (isVM) {\n        //           var vmError = txExecution.checkVMError(txResult)\n        //           if (vmError.error) {\n        //             self.registry.get('logCallback').api(`${logMsg} errored: ${vmError.message} `)\n        //             return\n        //           }\n        //         }\n        //         if (lookupOnly) {\n        //           var decoded = decodeResponseToTreeView(executionContext.isVM() ? txResult.result.vm.return : ethJSUtil.toBuffer(txResult.result), args.funABI)\n        //           outputCb(decoded)\n        //         }\n        //       } else {\n        //         self.registry.get('logCallback').api(`${logMsg} errored: ${error} `)\n        //       }\n        //     })\n        //   } else {\n        //     self.registry.get('logCallback').api(`${logMsg} errored: ${error} `)\n        //   }\n        // }, (msg) => {\n        //   self.registry.get('logCallback').api(msg)\n        // }, (data, runTxCallback) => {\n        //   // called for libraries deployment\n        //   self.udapp.runTx(data, confirmationCb, runTxCallback)\n        // })\n      }\n\n      var multiParamManager = new MultiParamManager(lookupOnly, args.funABI, (valArray, inputsValues, domEl) => {\n        clickButton(valArray, inputsValues, domEl)\n      }, getInputs(args.funABI))\n\n      return multiParamManager.render()\n    }\n\n    render(){\n\n      if(this.state.config.hide){\n        return false\n      } else {\n        let contractDisplay = []\n        if(this.state.contracts){\n          for(let c in this.state.contracts){\n            let address = this.state.contracts[c]._address\n            if (address)\n            {\n              contractDisplay.push(\n                <div key={\"contract\"+c} style={{margin:5,padding:5}}>\n                  {c} ({address})\n                </div>\n              )\n              let abi = this.state.contracts[c]._abi\n              contractDisplay.push(this.renderInstanceFromABI(abi, address, c))\n\n            }\n          }\n        }else {\n          contractDisplay = \"Loading...\"\n        }\n        return (\n          <div style={{padding:10}}>\n            <b>Contracts</b>\n            {contractDisplay}\n          </div>\n        )\n      }\n    }\n\n}\n","import { Component } from 'react';\nexport * from './arcadecontractloader';\n\nexport default class Arcade extends Component {\n\n    constructor(props) {\n      super(props);\n    }\n\n    componentDidUpdate() {\n      console.log(this.state);\n    }\n\n    async componentDidMount() {\n      console.log(this.constructor.name + \" componentDidMount\");\n    }\n\n    render() {\n      return null;\n    }\n}\n","import React from 'react';\nimport Arcade, {ArcadeContractLoader} from './package';\nimport { Metamask, Gas, ContractLoader, Transactions, Events, Scaler, Blockie, Address, Button } from \"dapparatus\"\nimport axios from 'axios';\nimport Web3 from 'web3';\n\nclass Demo extends Arcade {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      web3: false,\n      account: false,\n      gwei: 4,\n      doingTransaction: false,\n      msg: \"Waiting...\"\n    }\n\n    this.getServerMessage();\n  }\n\n  async getServerMessage() {\n    var resp = await axios.get(\"/hello\");\n    this.setState(\n      resp.data\n    )\n  };\n\n  render() {\n\n    let {web3,account,contracts,tx,gwei,block,avgBlockTime,etherscan} = this.state\n    let connectedDisplay = []\n    if(web3){\n      connectedDisplay.push(\n       <Gas\n         key=\"Gas\"\n         onUpdate={(state)=>{\n           console.log(\"Gas price update:\",state)\n           this.setState(state,()=>{\n             console.log(\"GWEI set:\",this.state)\n           })\n         }}\n       />\n      )\n\n      connectedDisplay.push(\n        <ArcadeContractLoader\n          config={{DEBUG:true, hide:false}}\n          web3={web3}\n          contracts={require(`${__dirname}/contracts`)}\n        />\n      )\n    }\n\n    return (\n      <div>\n      <div className=\"App\">\n        <Metamask\n          config={{requiredNetwork:['Private', 'Unknown','Rinkeby', 'Ropsten', 'Mainnet']}}\n          onUpdate={(state)=>{\n           console.log(\"metamask state update:\",state)\n           if(state.web3Provider) {\n             state.web3 = new Web3(state.web3Provider)\n             this.setState(state)\n           }\n          }}\n        />\n        {connectedDisplay}\n      </div>\n        Hello!\n        <div>\n          {this.state.msg}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Demo;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Demo from './Demo';\n\nReactDOM.render(\n  <Demo\n    // sampleProp={sampleProp}\n  />, document.getElementById('root'));\n"],"sourceRoot":""}